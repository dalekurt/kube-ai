name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Install Taskfile
        run: go install github.com/go-task/task/v3/cmd/task@latest
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Update CHANGELOG.md for new version
        run: |
          echo "Updating CHANGELOG.md for version $VERSION"
          task changelog:specific -- $VERSION
          
          # Show the updated CHANGELOG.md
          grep -A 10 "## \[$VERSION\]" CHANGELOG.md
      
      - name: Update version info
        run: |
          git_commit=$(git rev-parse --short HEAD)
          build_date=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "Setting version to $VERSION, commit $git_commit, build date $build_date"
          sed -i "s/Version = \".*\"/Version = \"$VERSION\"/g" pkg/version/version.go
          sed -i "s/GitCommit = \".*\"/GitCommit = \"$git_commit\"/g" pkg/version/version.go
          sed -i "s/BuildDate = \".*\"/BuildDate = \"$build_date\"/g" pkg/version/version.go
          cat pkg/version/version.go
      
      - name: Debug directory structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "CMD directory structure:"
          ls -la cmd/
          echo "CMD/kube-ai directory structure:"
          ls -la cmd/kube-ai/

      - name: Build binaries manually
        run: |
          mkdir -p ./bin
          echo "Building manually instead of using task..."
          # Linux
          GOOS=linux GOARCH=amd64 go build -ldflags "-X kube-ai/pkg/version.Version=$VERSION -X kube-ai/pkg/version.GitCommit=$(git rev-parse --short HEAD) -X kube-ai/pkg/version.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ) -s -w" -o ./bin/kube-ai-linux-amd64 ./cmd/kube-ai
          GOOS=linux GOARCH=arm64 go build -ldflags "-X kube-ai/pkg/version.Version=$VERSION -X kube-ai/pkg/version.GitCommit=$(git rev-parse --short HEAD) -X kube-ai/pkg/version.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ) -s -w" -o ./bin/kube-ai-linux-arm64 ./cmd/kube-ai
          # MacOS
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X kube-ai/pkg/version.Version=$VERSION -X kube-ai/pkg/version.GitCommit=$(git rev-parse --short HEAD) -X kube-ai/pkg/version.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ) -s -w" -o ./bin/kube-ai-darwin-amd64 ./cmd/kube-ai
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X kube-ai/pkg/version.Version=$VERSION -X kube-ai/pkg/version.GitCommit=$(git rev-parse --short HEAD) -X kube-ai/pkg/version.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ) -s -w" -o ./bin/kube-ai-darwin-arm64 ./cmd/kube-ai
          # Windows
          GOOS=windows GOARCH=amd64 go build -ldflags "-X kube-ai/pkg/version.Version=$VERSION -X kube-ai/pkg/version.GitCommit=$(git rev-parse --short HEAD) -X kube-ai/pkg/version.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ) -s -w" -o ./bin/kube-ai-windows-amd64.exe ./cmd/kube-ai
          # Create checksums
          cd ./bin && sha256sum kube-ai-* > checksums.txt
      
      - name: Package archives for Krew distribution
        run: |
          mkdir -p ./dist
          # Linux amd64
          mkdir -p ./dist/linux_amd64
          cp ./bin/kube-ai-linux-amd64 ./dist/linux_amd64/kube-ai
          cp LICENSE ./dist/linux_amd64/
          cd ./dist/linux_amd64
          tar czf ../kube-ai_Linux_x86_64.tar.gz *
          cd ../..
          
          # Linux arm64
          mkdir -p ./dist/linux_arm64
          cp ./bin/kube-ai-linux-arm64 ./dist/linux_arm64/kube-ai
          cp LICENSE ./dist/linux_arm64/
          cd ./dist/linux_arm64
          tar czf ../kube-ai_Linux_arm64.tar.gz *
          cd ../..
          
          # Darwin amd64
          mkdir -p ./dist/darwin_amd64
          cp ./bin/kube-ai-darwin-amd64 ./dist/darwin_amd64/kube-ai
          cp LICENSE ./dist/darwin_amd64/
          cd ./dist/darwin_amd64
          tar czf ../kube-ai_Darwin_x86_64.tar.gz *
          cd ../..
          
          # Darwin arm64
          mkdir -p ./dist/darwin_arm64
          cp ./bin/kube-ai-darwin-arm64 ./dist/darwin_arm64/kube-ai
          cp LICENSE ./dist/darwin_arm64/
          cd ./dist/darwin_arm64
          tar czf ../kube-ai_Darwin_arm64.tar.gz *
          cd ../..
          
          # Windows amd64
          mkdir -p ./dist/windows_amd64
          cp ./bin/kube-ai-windows-amd64.exe ./dist/windows_amd64/kube-ai.exe
          cp LICENSE ./dist/windows_amd64/
          cd ./dist/windows_amd64
          zip -r ../kube-ai_Windows_x86_64.zip *
          cd ../..
          
          # Calculate SHA256 checksums for the archives
          cd ./dist
          sha256sum kube-ai_Linux_x86_64.tar.gz > linux_amd64_sha256
          sha256sum kube-ai_Linux_arm64.tar.gz > linux_arm64_sha256
          sha256sum kube-ai_Darwin_x86_64.tar.gz > darwin_amd64_sha256
          sha256sum kube-ai_Darwin_arm64.tar.gz > darwin_arm64_sha256
          sha256sum kube-ai_Windows_x86_64.zip > windows_amd64_sha256
          cd ..
      
      - name: Update ai.yaml for Krew
        run: |
          # Update version in ai.yaml
          sed -i "s/version: \"v[0-9]*\.[0-9]*\.[0-9]*\"/version: \"v$VERSION\"/g" ai.yaml
          
          # Update download URLs
          sed -i "s|uri: https://github.com/dalekurt/kube-ai/releases/download/v[0-9]*\.[0-9]*\.[0-9]*/kube-ai_Linux_x86_64.tar.gz|uri: https://github.com/dalekurt/kube-ai/releases/download/v$VERSION/kube-ai_Linux_x86_64.tar.gz|g" ai.yaml
          sed -i "s|uri: https://github.com/dalekurt/kube-ai/releases/download/v[0-9]*\.[0-9]*\.[0-9]*/kube-ai_Linux_arm64.tar.gz|uri: https://github.com/dalekurt/kube-ai/releases/download/v$VERSION/kube-ai_Linux_arm64.tar.gz|g" ai.yaml
          sed -i "s|uri: https://github.com/dalekurt/kube-ai/releases/download/v[0-9]*\.[0-9]*\.[0-9]*/kube-ai_Darwin_x86_64.tar.gz|uri: https://github.com/dalekurt/kube-ai/releases/download/v$VERSION/kube-ai_Darwin_x86_64.tar.gz|g" ai.yaml
          sed -i "s|uri: https://github.com/dalekurt/kube-ai/releases/download/v[0-9]*\.[0-9]*\.[0-9]*/kube-ai_Darwin_arm64.tar.gz|uri: https://github.com/dalekurt/kube-ai/releases/download/v$VERSION/kube-ai_Darwin_arm64.tar.gz|g" ai.yaml
          sed -i "s|uri: https://github.com/dalekurt/kube-ai/releases/download/v[0-9]*\.[0-9]*\.[0-9]*/kube-ai_Windows_x86_64.zip|uri: https://github.com/dalekurt/kube-ai/releases/download/v$VERSION/kube-ai_Windows_x86_64.zip|g" ai.yaml
          
          # Calculate and display SHA256 checksums for debugging
          echo "Calculating SHA256 checksums for archives..."
          
          # Make sure we're in the right directory
          cd $GITHUB_WORKSPACE
          
          # Ensure the dist directory exists and contains our archives
          ls -la dist/
          
          # Calculate SHA256 directly with full debug output
          LINUX_AMD64_SHA=$(sha256sum dist/kube-ai_Linux_x86_64.tar.gz | awk '{print $1}')
          echo "Linux AMD64 SHA: $LINUX_AMD64_SHA"
          
          LINUX_ARM64_SHA=$(sha256sum dist/kube-ai_Linux_arm64.tar.gz | awk '{print $1}')
          echo "Linux ARM64 SHA: $LINUX_ARM64_SHA"
          
          DARWIN_AMD64_SHA=$(sha256sum dist/kube-ai_Darwin_x86_64.tar.gz | awk '{print $1}')
          echo "Darwin AMD64 SHA: $DARWIN_AMD64_SHA"
          
          DARWIN_ARM64_SHA=$(sha256sum dist/kube-ai_Darwin_arm64.tar.gz | awk '{print $1}')
          echo "Darwin ARM64 SHA: $DARWIN_ARM64_SHA"
          
          WINDOWS_AMD64_SHA=$(sha256sum dist/kube-ai_Windows_x86_64.zip | awk '{print $1}')
          echo "Windows AMD64 SHA: $WINDOWS_AMD64_SHA"
          
          # Update SHA256 values in ai.yaml with direct sed replacements
          echo "Updating SHA256 values in ai.yaml..."
          
          # Show original ai.yaml
          echo "Original ai.yaml:"
          cat ai.yaml
          
          # Linux AMD64
          sed -i "s|sha256: \"{{ sha256 will be generated during release }}\"|sha256: \"$LINUX_AMD64_SHA\"|" ai.yaml
          
          # Linux ARM64 - need to skip the first occurrence which was updated above
          sed -i "0,/sha256: \".*\"/! {0,/sha256: \".*\"/ s|sha256: \".*\"|sha256: \"$LINUX_ARM64_SHA\"|}" ai.yaml
          
          # Darwin AMD64 - need to skip the first two occurrences
          sed -i "0,/sha256: \".*\"/! {0,/sha256: \".*\"/! {0,/sha256: \".*\"/ s|sha256: \".*\"|sha256: \"$DARWIN_AMD64_SHA\"|} }" ai.yaml
          
          # Darwin ARM64 - need to skip the first three occurrences
          sed -i "0,/sha256: \".*\"/! {0,/sha256: \".*\"/! {0,/sha256: \".*\"/! {0,/sha256: \".*\"/ s|sha256: \".*\"|sha256: \"$DARWIN_ARM64_SHA\"|} } }" ai.yaml
          
          # Windows AMD64 - need to skip the first four occurrences
          sed -i "0,/sha256: \".*\"/! {0,/sha256: \".*\"/! {0,/sha256: \".*\"/! {0,/sha256: \".*\"/! {0,/sha256: \".*\"/ s|sha256: \".*\"|sha256: \"$WINDOWS_AMD64_SHA\"|} } } }" ai.yaml
          
          # Show the updated ai.yaml
          echo "Updated ai.yaml:"
          cat ai.yaml
      
      - name: Commit updated ai.yaml back to the repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Checkout the default branch (main or master)
          git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
          # Get the latest changes
          git pull
          # Apply the changes to ai.yaml and CHANGELOG.md
          git add ai.yaml CHANGELOG.md
          git commit -m "Update ai.yaml and CHANGELOG.md for v$VERSION [skip ci]" || echo "No changes to commit"
          git push
      
      - name: Copy archives to bin directory for release
        run: |
          cp ./dist/kube-ai_*.* ./bin/
      
      - name: Extract release notes from CHANGELOG
        id: extract_notes
        run: |
          CHANGELOG_CONTENT=$(./scripts/auto-release.sh $VERSION extract-notes)
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Get commits since last release
        id: get_commits
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %h %s" --reverse)
          else
            COMMITS=$(git log --pretty=format:"- %h %s" ${PREVIOUS_TAG}..HEAD --reverse)
          fi
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.VERSION }}
          files: |
            bin/*
            ai.yaml
          draft: false
          prerelease: false
          generate_release_notes: false
          body: |
            ${{ env.CHANGELOG_CONTENT }}
            
            ## Changelog
            ${{ env.COMMITS }}
            
            ## Installation
            
            ### Using Krew
            
            ```bash
            kubectl krew install ai
            ```
            
            ### Manual Installation
            
            #### Linux (amd64)
            ```bash
            curl -L https://github.com/dalekurt/kube-ai/releases/download/v${{ env.VERSION }}/kube-ai-linux-amd64 -o kubectl-ai
            chmod +x kubectl-ai
            sudo mv kubectl-ai /usr/local/bin/
            ```
            
            #### macOS (Apple Silicon)
            ```bash
            curl -L https://github.com/dalekurt/kube-ai/releases/download/v${{ env.VERSION }}/kube-ai-darwin-arm64 -o kubectl-ai
            chmod +x kubectl-ai
            sudo mv kubectl-ai /usr/local/bin/
            ```
            
            See the [documentation](README.md) for more details. 