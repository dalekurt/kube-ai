version: '3'

vars:
  BINARY_NAME: kube-ai
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  COMMIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo "none"
  BUILD_DATE:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  GO_FLAGS: -ldflags "-X kube-ai/pkg/version.Version={{.VERSION}} -X kube-ai/pkg/version.GitCommit={{.COMMIT}} -X kube-ai/pkg/version.BuildDate={{.BUILD_DATE}} -s -w"
  DOCKER_IMAGE: dalekurt/kube-ai
  
env:
  CGO_ENABLED: 0

tasks:
  default:
    cmds:
      - task: help

  help:
    desc: Display this help message
    silent: true
    cmds:
      - echo "Available tasks:"
      - echo "  task build            - Build the binary for current platform"
      - echo "  task build:all        - Build for all platforms"
      - echo "  task test             - Run tests"
      - echo "  task lint             - Run linting"
      - echo "  task release          - Create a new release (task release -- 1.0.0)"
      - echo "  task docker:build     - Build Docker image"
      - echo "  task docker:push      - Push Docker image to registry"
      - echo "  task clean            - Clean build artifacts"
      - echo "  task install          - Install binary to /usr/local/bin"

  build:
    desc: Build the binary for current platform
    cmds:
      - mkdir -p ./bin
      - echo "Building {{.BINARY_NAME}} version {{.VERSION}} ({{.COMMIT}}) built on {{.BUILD_DATE}}"
      - go build {{.GO_FLAGS}} -o ./bin/{{.BINARY_NAME}} ./cmd/kube-ai
    sources:
      - ./cmd/**/*.go
      - ./pkg/**/*.go
    generates:
      - ./bin/{{.BINARY_NAME}}

  build:all:
    desc: Build binaries for all platforms
    cmds:
      - mkdir -p ./bin
      - echo "Building {{.BINARY_NAME}} version {{.VERSION}} ({{.COMMIT}}) for all platforms"
      # Linux
      - GOOS=linux GOARCH=amd64 go build {{.GO_FLAGS}} -o ./bin/{{.BINARY_NAME}}-linux-amd64 ./cmd/kube-ai
      - GOOS=linux GOARCH=arm64 go build {{.GO_FLAGS}} -o ./bin/{{.BINARY_NAME}}-linux-arm64 ./cmd/kube-ai
      # MacOS
      - GOOS=darwin GOARCH=amd64 go build {{.GO_FLAGS}} -o ./bin/{{.BINARY_NAME}}-darwin-amd64 ./cmd/kube-ai
      - GOOS=darwin GOARCH=arm64 go build {{.GO_FLAGS}} -o ./bin/{{.BINARY_NAME}}-darwin-arm64 ./cmd/kube-ai
      # Windows
      - GOOS=windows GOARCH=amd64 go build {{.GO_FLAGS}} -o ./bin/{{.BINARY_NAME}}-windows-amd64.exe ./cmd/kube-ai
      # Create checksums
      - cd ./bin && sha256sum {{.BINARY_NAME}}* > checksums.txt

  test:
    desc: Run tests
    cmds:
      - go test -v ./...

  test:coverage:
    desc: Run tests with coverage report
    cmds:
      - mkdir -p ./coverage
      - go test -v -coverprofile=./coverage/coverage.out ./...
      - go tool cover -html=./coverage/coverage.out -o ./coverage/coverage.html
      - echo "Coverage report available at ./coverage/coverage.html"

  lint:
    desc: Run linting
    cmds:
      - if ! command -v golangci-lint &> /dev/null; then echo "golangci-lint not found, installing..."; go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; fi
      - golangci-lint run ./...

  release:
    desc: Create a new release (requires version argument)
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Error: Version is required. Example: task release -- 1.0.0"
          exit 1
        fi
      - ./scripts/release.sh {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  docker:build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.DOCKER_IMAGE}}:{{.VERSION}} -t {{.DOCKER_IMAGE}}:latest .

  docker:push:
    desc: Push Docker image to registry
    cmds:
      - docker push {{.DOCKER_IMAGE}}:{{.VERSION}}
      - docker push {{.DOCKER_IMAGE}}:latest

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf ./bin
      - rm -rf ./coverage

  install:
    desc: Install binary to /usr/local/bin
    deps: [build]
    cmds:
      - cp ./bin/{{.BINARY_NAME}} /usr/local/bin/
      - chmod +x /usr/local/bin/{{.BINARY_NAME}}
      - echo "{{.BINARY_NAME}} installed to /usr/local/bin" 